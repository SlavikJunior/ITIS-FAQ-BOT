package bot.handlers;

import bot.Secrets;
import org.telegram.telegrambots.meta.api.methods.botapimethods.BotApiMethod;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageReplyMarkup;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.generics.TelegramClient;
import java.util.Set;

/**
 * –ö–ª–∞—Å—Å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å callback –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è @DEV_ITIS_FAQ_BOT
 *
 * @author github.com/SlavikJunior, github.com/tensaid7
 * @version 1.0.1
 * @since 1.0.1
 **/

public class DEVcallbackHandler {
    private final TelegramClient CLIENT;

    public DEVcallbackHandler(TelegramClient client) {
        CLIENT = client;
    }

    public void handle(CallbackQuery callbackQuery) {
        String action = callbackQuery.getData();
        long chatId = callbackQuery.getMessage().getChatId();
        int messageId = callbackQuery.getMessage().getMessageId();

        try {
            switch (action) {
                case "admin_add":
                    handleAddAction(chatId);
                    break;
                case "admin_remove":
                    handleRemoveAction(chatId);
                    break;
                case "admin_list":
                    handleListAction(chatId);
                    break;
                case "admin_clear":
                    handleClearAction(chatId);
                    break;
                case "admin_change":
                    handleChangeAction(chatId);
                    break;
                case "admin_reset":
                    handleResetAction(chatId);
                    break;
                case "admin_cancel":
                    handleCancelAction(chatId, messageId);
                    return;
                default:
                    try {
                        execute(SendMessage.builder()
                                .chatId(chatId)
                                .text("‚ö† –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
                                .build());
                    } catch (TelegramApiException e) {
                        System.out.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!");
                    }
                    return;
            }

            removeReplyMarkup(chatId, messageId);
        } catch (TelegramApiException e) {
            handleCallbackError(chatId, e);
        }
    }

    private void handleAddAction(long chatId) throws TelegramApiException {
        execute(SendMessage.builder()
                .chatId(chatId)
                .text("\uD83E\uDEB5 –í–≤–µ–¥–∏—Ç–µ ID –∂—É–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")
                .replyMarkup(createCancelKeyboard())
                .build());
    }

    private void handleRemoveAction(long chatId) throws TelegramApiException {
        execute(SendMessage.builder()
                .chatId(chatId)
                .text("\uD83D\uDD04 –í–≤–µ–¥–∏—Ç–µ ID –∂—É–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
                .replyMarkup(createCancelKeyboard())
                .build());
    }

    private void handleListAction(long chatId) throws TelegramApiException {
        Set<Secrets.AlarmUser> users = Secrets.getAlarmUsers();
        String response = users.isEmpty()
                ? "üìã –°–ø–∏—Å–æ–∫ –∂—É–∫–æ–≤ –ø—É—Å—Ç"
                : "üìã –°–ø–∏—Å–æ–∫ –∂—É–∫–æ–≤:\n" + String.join("\n", users.toString());

        execute(SendMessage.builder()
                .chatId(chatId)
                .text(response)
                .build());
    }

    private void handleClearAction(long chatId) throws TelegramApiException {
        execute(SendMessage.builder()
                .chatId(chatId)
                .text("‚ùì –¢—ã —Å–¥–µ–ª–∞–µ—à—å —ç—Ç–æ?\n–¢–æ–≥–¥–∞ –≤–≤–µ–¥–∏: <–ö–æ–Ω–µ—Ü –∂—É—á—å–µ–º—É –∫—Ä–∏–º–∏–Ω–∞–ª—É> –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ \uD83D\uDEA8")
                .build());
    }

    private void handleChangeAction(long chatId) throws TelegramApiException {
        execute(SendMessage.builder()
                .chatId(chatId)
                .text("\uD83D\uDD04 –í–≤–µ–¥–∏—Ç–µ ID –∂—É–∫–∞ –∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ–Ω –¥–æ–ª–∂–µ–Ω —É–≤–∏–¥–µ—Ç—å:")
                .replyMarkup(createCancelKeyboard())
                .build());
    }

    private void handleResetAction(long chatId) throws TelegramApiException {
        execute(SendMessage.builder()
                .chatId(chatId)
                .text("\uD83D\uDD04 –í–≤–µ–¥–∏—Ç–µ ID –∂—É–∫–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç:")
                .replyMarkup(createCancelKeyboard())
                .build());
    }

    private void handleCancelAction(long chatId, int messageId) throws TelegramApiException {
        execute(DeleteMessage.builder()
                .chatId(chatId)
                .messageId(messageId)
                .build());
    }

    private void removeReplyMarkup(long chatId, int messageId) throws TelegramApiException {
        execute(EditMessageReplyMarkup.builder()
                .chatId(chatId)
                .messageId(messageId)
                .replyMarkup(null)
                .build());
    }

    private InlineKeyboardMarkup createCancelKeyboard() {
        return InlineKeyboardMarkup.builder()
                .keyboardRow(new InlineKeyboardRow(
                        InlineKeyboardButton.builder()
                                .text("‚ùå –û—Ç–º–µ–Ω–∞")
                                .callbackData("admin_cancel")
                                .build()
                ))
                .build();
    }

    private void handleCallbackError(long chatId, TelegramApiException e) {
        try {
            execute(SendMessage.builder()
                    .chatId(chatId)
                    .text("‚ö† –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
                    .build());
            System.err.println("Callback error: " + e.getMessage());
        } catch (Exception ex) {
            System.err.println("Double error: " + ex.getMessage());
        }
    }

    // —ç–∫–∑–µ–∫—å—é—Ç–æ—Ä –¥–ª—è –æ–±—â–∏—Ö –º–µ—Ç–æ–¥–æ–≤
    private void execute(BotApiMethod<?> method) throws TelegramApiException {
        CLIENT.execute(method);
    }
}