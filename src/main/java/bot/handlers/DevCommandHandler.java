package bot.handlers;

import bot.DevLoggerBot;
import bot.Secrets;
import bot.shared.LogEntry;
import org.telegram.telegrambots.meta.api.methods.send.SendDocument;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageReplyMarkup;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.message.Message;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.generics.TelegramClient;

import java.io.*;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.Set;

public class DevCommandHandler {
    private static TelegramClient CLIENT;
    private final DevLoggerBot BOT;
    private static final int MAX_INLINE_LOGS = 10;// –ú–∞–∫—Å–∏–º—É–º –ª–æ–≥–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏


    public DevCommandHandler(TelegramClient client, DevLoggerBot loggerBot) {
        CLIENT = client;
        this.BOT = loggerBot;
    }

    public void handle(Message message) {
        String text = message.getText().trim();
        long chatId = message.getChatId();

        if (text.equals("/start") || text.equals("/start@DEV_ITIS_FAQ_BOT"))
            sendMessage(chatId, "–≠—Ç–æ—Ç –±–æ—Ç –Ω—É–∂–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤ –±–æ—Ç–∞ @ITIS_FAQ_BOT \uD83C\uDF93");
        else if (text.equals("/admin") || text.equals("/admin@DEV_ITIS_FAQ_BOT"))
            sendAdminPanel(message.getChatId());
        else if (text.equals("/help") || text.equals("/help@DEV_ITIS_FAQ_BOT")) {
            sendMessage(chatId, """
                    üìú –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
                    /start - –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –±–æ—Ç–∞
                    /help - –ø–æ–ª—É—á–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    /admin - –∞–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂—É—á–∏–º –∫—Ä–∏–º–∏–Ω–∞–ª–æ–º
                    /logs ‚Äî –≤—Å–µ –ª–æ–≥–∏
                    /logs N ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –ª–æ–≥–æ–≤
                    """);
        } else if (text.equals("/logs") || text.equals("/logs@DEV_ITIS_FAQ_BOT"))
            sendLogsFile(chatId, BOT.getLogs(Integer.MAX_VALUE), "all_logs.txt");  // –í—Å–µ –ª–æ–≥–∏ —Ñ–∞–π–ª–æ–º
        else if (text.matches("/logs\\s+\\d+")) {
            int limit = Integer.parseInt(text.split("\\s+")[1]);
            if (limit <= MAX_INLINE_LOGS)
                sendLastLogs(chatId, limit); // –ú–∞–ª–æ –ª–æ–≥–æ–≤ ‚Üí —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            else
                sendLogsFile(chatId, BOT.getLogs(limit), "last_" + limit + "_logs.txt");  // –ú–Ω–æ–≥–æ –ª–æ–≥–æ–≤ ‚Üí —Ñ–∞–π–ª–æ–º
        } else if (message.getReplyToMessage() != null && message.getReplyToMessage().hasText()) {
            Message repliedTo = message.getReplyToMessage();
            if (repliedTo.getText().equals("‚ùì –¢—ã —Å–¥–µ–ª–∞–µ—à—å —ç—Ç–æ?\n–¢–æ–≥–¥–∞ –≤–≤–µ–¥–∏: <–ö–æ–Ω–µ—Ü –∂—É—á—å–µ–º—É –∫—Ä–∏–º–∏–Ω–∞–ª—É> –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ \uD83D\uDEA8") &&
                    message.hasText() && message.getText().equals("–ö–æ–Ω–µ—Ü –∂—É—á—å–µ–º—É –∫—Ä–∏–º–∏–Ω–∞–ª—É")) {
                Secrets.clearAlarmUsersIds();
                try {
                    execute(SendMessage.builder()
                            .text("\uD83D\uDCCC –í–æ—Ç –∏ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –∫—Ä–∏–º–∏–Ω–∞–ª")
                            .chatId(chatId)
                            .build());
                } catch (TelegramApiException e) {
                    System.out.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–Ω—Ü–∞ –∫—Ä–∏–º–∏–Ω–∞–ª–∞!");
                }
            }
        } else
            sendMessage(chatId, "–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞! ‚ö†");
    }

    private void sendLogsFile(long chatId, List<LogEntry> logs, String fileName) {
        File file = null;
        try {
            // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ª–æ–≥–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            if (logs == null || logs.isEmpty()) {
                sendMessage(chatId, "‚ö†Ô∏è –ù–µ—Ç –ª–æ–≥–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞");
                return;
            }

            // 2. –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            File tempDir = new File(System.getProperty("java.io.tmpdir"), "telegram_logs");
            if (!tempDir.exists() && !tempDir.mkdirs()) {
                throw new IOException("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤");
            }

            file = new File(tempDir, fileName);

            // 3. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ª–æ–≥–∏ —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π UTF-8
            try (BufferedWriter writer = new BufferedWriter(
                    new OutputStreamWriter(new FileOutputStream(file), StandardCharsets.UTF_8))) {

                for (LogEntry log : logs) {
                    writer.write(String.format("[%s] Confidence: %.2f\nQ: %s\nA: %s\n\n",
                            log.getTimestamp(),
                            log.getConfidence(),
                            log.getQuestion(),
                            log.getAnswer()));
                }
                writer.flush();
            }

            // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –∏ –Ω–µ –ø—É—Å—Ç–æ–π
            if (file.length() == 0) {
                throw new IOException("–§–∞–π–ª –ª–æ–≥–æ–≤ –ø—É—Å—Ç");
            }

            // 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–∞–π–º–∞—É—Ç–∞
            SendDocument doc = SendDocument.builder()
                    .chatId(chatId)
                    .document(new InputFile(file, fileName))
                    .build();

            CLIENT.execute(doc);

        } catch (IOException e) {
            sendMessage(chatId, "üìõ –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤: " + e.getMessage());
        } catch (TelegramApiException e) {
            sendMessage(chatId, "üìõ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –≤ Telegram");
        } finally {
            // 6. –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            if (file != null && !file.delete()) {
                file.deleteOnExit();
            }
        }
    }

    private void sendLastLogs(long chatId, int limit) {
        List<LogEntry> logs = BOT.getLogs(limit);
        if (logs.isEmpty()) {
            sendMessage(chatId, "‚ö† –ù–µ—Ç –ª–æ–≥–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞");
            return;
        }

        StringBuilder sb = new StringBuilder("üìú *–ü–æ—Å–ª–µ–¥–Ω–∏–µ " + limit + " –ª–æ–≥–æ–≤:*\n\n");
        for (LogEntry log : logs) {
            String logType = "";
            if (log.getType().equals("BAD_FEEDBACK")) {
                logType = "üëé *–ü–õ–û–•–û–ô –û–¢–ó–´–í*";
            } else if (log.getType().equals("LOW_CONFIDENCE")) {
                logType = "‚ö†Ô∏è *–ù–ò–ó–ö–ê–Ø –£–í–ï–†–ï–ù–ù–û–°–¢–¨*";
            }

            sb.append(String.format("""
                            %s
                            üë§ *%s*
                            üïí *%s* | –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: *%.2f*
                            ‚ùì `%s`
                            üí¨ `%s`
                            ------------------------
                            """, logType, log.getUserId(), log.getTimestamp(), log.getConfidence(),
                    log.getQuestion(), log.getAnswer()));
        }

        sendMarkdown(chatId, sb.toString());
    }

    private void sendMarkdown(long chatId, String text) {
        SendMessage msg = new SendMessage(String.valueOf(chatId), text);
        msg.enableMarkdown(true);
        try {
            CLIENT.execute(msg);
        } catch (TelegramApiException e) {
            System.out.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±–æ—Ç–∞ –ª–æ–≥–µ—Ä–∞!");
        }
    }

    private void sendAdminPanel(long chatId) {
        SendMessage message = SendMessage.builder()
                .chatId(chatId)
                .text("üõ†Ô∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂—É–∫–∞–º–∏")
                .replyMarkup(createAdminKeyboard())
                .build();

        try {
            CLIENT.execute(message);
        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: " + e.getMessage());
        }
    }

    private InlineKeyboardMarkup createAdminKeyboard() {
        InlineKeyboardButton addButton = InlineKeyboardButton.builder()
                .text("\uD83E\uDEB5 –î–æ–±–∞–≤–∏—Ç—å –∂—É–∫–∞")
                .callbackData("admin_add")
                .build();

        InlineKeyboardButton removeButton = InlineKeyboardButton.builder()
                .text("\uD83D\uDD04 –£–¥–∞–ª–∏—Ç—å –∂—É–∫–∞")
                .callbackData("admin_remove")
                .build();

        InlineKeyboardButton listButton = InlineKeyboardButton.builder()
                .text("üìã –°–ø–∏—Å–æ–∫ –∂—É–∫–æ–≤")
                .callbackData("admin_list")
                .build();

        InlineKeyboardButton clearButton = InlineKeyboardButton.builder()
                .text("\uD83D\uDEA8 –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∂—É–∫–æ–≤")
                .callbackData("admin_clear")
                .build();

        return InlineKeyboardMarkup.builder()
                .keyboardRow(new InlineKeyboardRow(addButton, removeButton))
                .keyboardRow(new InlineKeyboardRow(listButton))
                .keyboardRow(new InlineKeyboardRow(clearButton))
                .build();
    }

    public void handleAdminCallback(CallbackQuery callbackQuery) {
        long chatId = callbackQuery.getMessage().getChatId();
        String action = callbackQuery.getData();

        try {
            switch (action) {
                case "admin_add":
                    execute(SendMessage.builder()
                            .chatId(chatId)
                            .text("\uD83E\uDEB5 –í–≤–µ–¥–∏—Ç–µ ID –∂—É–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")
                            .replyMarkup(createCancelKeyboard())
                            .build());
                    break;

                case "admin_remove":
                    execute(SendMessage.builder()
                            .chatId(chatId)
                            .text("\uD83D\uDD04 –í–≤–µ–¥–∏—Ç–µ ID –∂—É–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
                            .replyMarkup(createCancelKeyboard())
                            .build());
                    break;

                case "admin_list":
                    Set<String> users = Secrets.getAlarmUserIds();
                    String response = users.isEmpty()
                            ? "üìã –°–ø–∏—Å–æ–∫ –∂—É–∫–æ–≤ –ø—É—Å—Ç"
                            : "üìã –°–ø–∏—Å–æ–∫ –∂—É–∫–æ–≤:\n" + String.join("\n", users);
                    execute(SendMessage.builder()
                            .chatId(chatId)
                            .text(response)
                            .build());
                    break;

                case "admin_clear":
                    String answer = "–¢—ã —Å–¥–µ–ª–∞–µ—à—å —ç—Ç–æ? ‚ùì\n–¢–æ–≥–¥–∞ –≤–≤–µ–¥–∏: <–ö–æ–Ω–µ—Ü –∂—É—á—å–µ–º—É –∫—Ä–∏–º–∏–Ω–∞–ª—É> –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ \uD83D\uDEA8";

                    execute(SendMessage.builder()
                            .chatId(chatId)
                            .text(answer)
                            .build());
                    break;

                case "admin_cancel":
                    execute(DeleteMessage.builder()
                            .chatId(chatId)
                            .messageId(callbackQuery.getMessage().getMessageId())
                            .build());
                    return;
            }

            // –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            execute(EditMessageReplyMarkup.builder()
                    .chatId(chatId)
                    .messageId(callbackQuery.getMessage().getMessageId())
                    .replyMarkup(null)
                    .build());

        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: " + e.getMessage());
        }
    }

    public void handleTextAfterCallback(Message message) {
        Message repliedTo = message.getReplyToMessage();
        if (repliedTo != null && repliedTo.hasText()) {
            String requestText = repliedTo.getText();
            String userInput = message.getText().trim();
            long chatId = message.getChatId();

            try {
                if (requestText.contains("–¥–æ–±–∞–≤–ª–µ–Ω–∏—è")) {
                    Secrets.handleAddRequest(chatId, userInput);
                } else if (requestText.contains("—É–¥–∞–ª–µ–Ω–∏—è"))
                    Secrets.handleRemoveRequest(chatId, userInput);
                else {
                    execute(SendMessage.builder()
                            .chatId(chatId)
                            .text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã")
                            .build());
                }

                // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º
                execute(DeleteMessage.builder()
                        .chatId(chatId)
                        .messageId(repliedTo.getMessageId())
                        .build());

            } catch (TelegramApiException e) {
                System.err.println("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: " + e.getMessage());
            }
        }
    }

    private InlineKeyboardMarkup createCancelKeyboard() {
        return InlineKeyboardMarkup.builder()
                .keyboardRow(new InlineKeyboardRow(
                        InlineKeyboardButton.builder()
                                .text("‚ùå –û—Ç–º–µ–Ω–∞")
                                .callbackData("admin_cancel")
                                .build()
                ))
                .build();
    }

    private void sendMessage(long chatId, String text) {
        try {
            CLIENT.execute(SendMessage.builder()
                    .chatId(String.valueOf(chatId))
                    .text(text)
                    .build());
        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
        }
    }

    private void execute(SendMessage message) throws TelegramApiException {
        CLIENT.execute(message);
    }

    private void execute(EditMessageReplyMarkup editMarkup) throws TelegramApiException {
        CLIENT.execute(editMarkup);
    }

    private void execute(DeleteMessage deleteMessage) throws TelegramApiException {
        CLIENT.execute(deleteMessage);
    }

    public static void sendMessageStatic(long chatId, String text) {
        try {
            CLIENT.execute(SendMessage.builder()
                    .chatId(chatId)
                    .text(text)
                    .build());
        } catch (TelegramApiException e) {
            System.out.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!");
        }
    }
}