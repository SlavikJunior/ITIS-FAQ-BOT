package bot.handlers;

import org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery;
import org.telegram.telegrambots.meta.api.methods.send.SendDocument;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageReplyMarkup;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.message.Message;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.io.*;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import bot.shared.LogEntry;
import bot.DevLoggerBot;
import org.telegram.telegrambots.meta.generics.TelegramClient;

public class DevCommandHandler {
    private final TelegramClient CLIENT;
    private final DevLoggerBot BOT;
    private static final int MAX_INLINE_LOGS = 10;// –ú–∞–∫—Å–∏–º—É–º –ª–æ–≥–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    // –æ–¥–∏–Ω –∏–∑ –ø–æ–¥—Ö–æ–¥–æ–≤ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å–≤–∏—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –∑–∞–ø—Ä–æ—Å–∞ –∫–Ω–æ–ø–∫–∏
//    private final Map<Long, Long> messageToUserMap = new ConcurrentHashMap<>();
//    private final int MAX_STORAGE_SIZE = 100;

    public DevCommandHandler(TelegramClient client, DevLoggerBot bot) {
        CLIENT = client;
        BOT = bot;
    }

    public void handle(Message message) {
        String text = message.getText().trim();
        long chatId = message.getChatId();

        if (text.equals("/start") || text.equals("/start@DEV_ITIS_FAQ_BOT"))
            sendMessage(chatId, "–≠—Ç–æ—Ç –±–æ—Ç –Ω—É–∂–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤ –±–æ—Ç–∞ @ITIS_FAQ_BOT \uD83C\uDF93");
        else if (text.equals("/admin") || text.equals("/admin@DEV_ITIS_FAQ_BOT"))
            sendMessageWithAdminPanel(message.getChatId(), message.getFrom().getId(), message.getMessageId());
        else if (text.equals("/help") || text.equals("/help@DEV_ITIS_FAQ_BOT")) {
            sendMessage(chatId, """
                üìú *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã*:
                `/logs` ‚Äî –≤—Å–µ –ª–æ–≥–∏
                `/logs N` ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –ª–æ–≥–æ–≤
                """);
        }
        else if (text.equals("/logs") || text.equals("/logs@DEV_ITIS_FAQ_BOT"))
            sendLogsFile(chatId, BOT.getLogs(Integer.MAX_VALUE), "all_logs.txt");  // –í—Å–µ –ª–æ–≥–∏ —Ñ–∞–π–ª–æ–º
        else if (text.matches("/logs\\s+\\d+")) {
            int limit = Integer.parseInt(text.split("\\s+")[1]);
            if (limit <= MAX_INLINE_LOGS)
                sendLastLogs(chatId, limit); // –ú–∞–ª–æ –ª–æ–≥–æ–≤ ‚Üí —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            else
                sendLogsFile(chatId, BOT.getLogs(limit), "last_" + limit + "_logs.txt");  // –ú–Ω–æ–≥–æ –ª–æ–≥–æ–≤ ‚Üí —Ñ–∞–π–ª–æ–º
        } else
            sendMessage(chatId, "–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞! ‚ö†");
    }

    private void sendLogsFile(long chatId, List<LogEntry> logs, String fileName) {
        File file = null;
        try {
            // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ª–æ–≥–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            if (logs == null || logs.isEmpty()) {
                sendMessage(chatId, "‚ö†Ô∏è –ù–µ—Ç –ª–æ–≥–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞");
                return;
            }

            // 2. –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            File tempDir = new File(System.getProperty("java.io.tmpdir"), "telegram_logs");
            if (!tempDir.exists() && !tempDir.mkdirs()) {
                throw new IOException("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤");
            }

            file = new File(tempDir, fileName);

            // 3. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ª–æ–≥–∏ —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π UTF-8
            try (BufferedWriter writer = new BufferedWriter(
                    new OutputStreamWriter(new FileOutputStream(file), StandardCharsets.UTF_8))) {

                for (LogEntry log : logs) {
                    writer.write(String.format("[%s] Confidence: %.2f\nQ: %s\nA: %s\n\n",
                            log.getTimestamp(),
                            log.getConfidence(),
                            log.getQuestion(),
                            log.getAnswer()));
                }
                writer.flush();
            }

            // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –∏ –Ω–µ –ø—É—Å—Ç–æ–π
            if (file.length() == 0) {
                throw new IOException("–§–∞–π–ª –ª–æ–≥–æ–≤ –ø—É—Å—Ç");
            }

            // 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–∞–π–º–∞—É—Ç–∞
            SendDocument doc = SendDocument.builder()
                    .chatId(chatId)
                    .document(new InputFile(file, fileName))
                    .build();

            CLIENT.execute(doc);

        } catch (IOException e) {
            sendMessage(chatId, "üìõ –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤: " + e.getMessage());
        } catch (TelegramApiException e) {
            sendMessage(chatId, "üìõ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –≤ Telegram");
        } finally {
            // 6. –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            if (file != null && !file.delete()) {
                file.deleteOnExit();
            }
        }
    }

    private void sendLastLogs(long chatId, int limit) {
        List<LogEntry> logs = BOT.getLogs(limit);
        if (logs.isEmpty()) {
            sendMessage(chatId, "‚ö† –ù–µ—Ç –ª–æ–≥–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞");
            return;
        }

        StringBuilder sb = new StringBuilder("üìú *–ü–æ—Å–ª–µ–¥–Ω–∏–µ " + limit + " –ª–æ–≥–æ–≤:*\n\n");
        for (LogEntry log : logs) {
            String logType = "";
            if (log.getType().equals("BAD_FEEDBACK")) {
                logType = "üëé *–ü–õ–û–•–û–ô –û–¢–ó–´–í*";
            } else if (log.getType().equals("LOW_CONFIDENCE")) {
                logType = "‚ö†Ô∏è *–ù–ò–ó–ö–ê–Ø –£–í–ï–†–ï–ù–ù–û–°–¢–¨*";
            }

            sb.append(String.format("""
            %s
            üë§ –û—Ç: *%s*
            üïí *%s* | –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: *%.2f*
            ‚ùì `%s`
            üí¨ `%s`
            ------------------------
            """, logType, log.getUserId(), log.getTimestamp(), log.getConfidence(),
                    log.getQuestion(), log.getAnswer()));
        }

        sendMarkdown(chatId, sb.toString());
    }

    private void sendMarkdown(long chatId, String text) {
        SendMessage msg = new SendMessage(String.valueOf(chatId), text);
        msg.enableMarkdown(true);
        try {
            CLIENT.execute(msg);
        } catch (TelegramApiException e) {
            System.out.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±–æ—Ç–∞ –ª–æ–≥–µ—Ä–∞!");
        }
    }

    private void sendMessage(long chatId, String text) {
        SendMessage msg = new SendMessage(String.valueOf(chatId), text);
        try {
            CLIENT.execute(msg);
        } catch (TelegramApiException e) {
            System.out.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±–æ—Ç–∞ –ª–æ–≥–µ—Ä–∞!");
        }
    }

    private InlineKeyboardMarkup createAdminPanel(long userId) {
        InlineKeyboardButton buttonAdd = InlineKeyboardButton.builder()
                .text("–ù–æ–≤—ã–π –∂—É–∫ \uD83D\uDCDD")
                .callbackData("/add" + " " + userId)
                .build();
        InlineKeyboardButton buttonGet = InlineKeyboardButton.builder()
                .text("–ù–∞—à–∏ –∂—É–∫–∏ \uD83E\uDEB5")
                .callbackData("/get" + " " + userId)
                .build();
        InlineKeyboardButton buttonRemove = InlineKeyboardButton.builder()
                .text("–£–¥–∞–ª–∏—Ç—å –∂—É–∫–∞ \uD83D\uDD04")
                .callbackData("/remove" + " " + userId)
                .build();

        InlineKeyboardRow row = new InlineKeyboardRow(buttonAdd, buttonGet, buttonRemove);
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup(List.of(row));

        return keyboard;
    }

    public void sendMessageWithAdminPanel(long chatId, long userId, long messageId) {
        InlineKeyboardMarkup keyboard = createAdminPanel(userId);

        SendMessage message = SendMessage.builder()
                .chatId(chatId)
                .text("–ü–∞–Ω–µ–ª—å–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂—É–∫–∞–º–∏ \uD83E\uDEB5")
                .replyMarkup(keyboard)
                .build();

        try {
            CLIENT.execute(message);
//            cachingRequest(userId, messageId);
        } catch (TelegramApiException e) {
            System.out.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±–æ—Ç–∞ –ª–æ–≥–µ—Ä–∞!");        }
    }

    public void handleCallbackFromAdminPanel(CallbackQuery callbackQuery) {
        String[] data = callbackQuery.getData().split(" ");
        if (data.length != 2)
            return;

        long allowedUserId = Long.parseLong(data[1]);
        long currentUserId = callbackQuery.getFrom().getId();

        if (currentUserId != allowedUserId) {
            answerCallbackQuery(callbackQuery.getId(), "‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∏ –∫–Ω–æ–ø–∫–∏!");
            return;
        }

        EditMessageReplyMarkup editMarkup = EditMessageReplyMarkup.builder()
                .chatId(String.valueOf(callbackQuery.getMessage().getChatId()))
                .messageId(callbackQuery.getMessage().getMessageId())
                .replyMarkup(null)
                .build();

        try {
            CLIENT.execute(editMarkup);
        } catch (TelegramApiException e) {
            System.out.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–¥–∞–ª—è–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è!");
        }
    }

//    private void cachingRequest(long userId, long messageId) {
//        if (messageToUserMap.size() >= MAX_STORAGE_SIZE) {
//            messageToUserMap.clear();
//        }
//        messageToUserMap.put(userId, messageId);
//    }

    private void answerCallbackQuery(String callbackQueryId, String text) {
        try {
            CLIENT.execute(AnswerCallbackQuery.builder()
                    .callbackQueryId(callbackQueryId)
                    .text(text)
                    .build());
        } catch (TelegramApiException e) {
            System.out.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–ª–ª–±–µ–∫!");
        }
    }
}
