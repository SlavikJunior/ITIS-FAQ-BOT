package bot.handlers;

import bot.DevLoggerBot;
import bot.Secrets;
import bot.shared.FAQclient;
import bot.shared.LogEntry;
import bot.shared.MessageStorage;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.User;
import org.telegram.telegrambots.meta.api.objects.message.Message;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.generics.TelegramClient;
import java.util.ArrayList;
import java.util.List;

/**
 * –ö–ª–∞—Å—Å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è @ITIS_FAQ_BOT
 *
 * @author github.com/SlavikJunior
 * @version 1.0.1
 * @since 1.0.1
 **/

public class ITISmessageHandler {
    private final TelegramClient CLIENT;
    private final DevLoggerBot LOGGER_BOT;
    private final MessageStorage MESSAGE_STORAGE;

    public ITISmessageHandler(TelegramClient client, DevLoggerBot loggerBot, MessageStorage messageStorage) {
        CLIENT = client;
        LOGGER_BOT = loggerBot;
        MESSAGE_STORAGE = messageStorage;
    }

    public void handle(Message message) {
        if (!message.hasText()) return;

        User user = message.getFrom();
        String userName = "@" + user.getUserName();
        String text = message.getText();
        long userId = user.getId();
        long chatId = message.getChatId();

        // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if (Secrets.isAdmission(userName) && MESSAGE_STORAGE.isAdminResponding(user.getId())) {
            handleAdminResponse(message);
            return;
        }

        // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –æ—Å–æ–±—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if (Secrets.isAlarmUser(String.valueOf(userId))) {
            sendMessage(chatId, Secrets.getAnswerForAlarmUser(String.valueOf(userId)));
            return;
        }

        if (text.equals("/start") || text.equals("/start@ITIS_FAQ_BOT")) {
            sendMessage(chatId, "\uD83E\uDD16 FAQ-–±–æ—Ç –ø—Ä–∏—ë–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏. –ü–æ–º–æ–≥–∞—é –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞–º –ø–æ—Å—Ç—É–ø–∏—Ç—å!");
        } else if (text.equals("/help") || text.equals("/help@ITIS_FAQ_BOT")) {
            sendMessage(chatId, "\uD83D\uDCCC –ù–∞–ø–∏—à–∏ /ask –∏ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å");
        } else if (text.equals("/ask") || text.equals("/ask@ITIS_FAQ_BOT")) {
            sendMessage(chatId, "\uD83D\uDCA1 –ü–æ–ø—Ä–æ–±—É–π /ask –∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å");
        } else if (text.startsWith("/ask ") || text.startsWith("/ask@ITIS_FAQ_BOT ")) {
            handleQuestion(message, text, userId, chatId);
        }
    }

    private void handleQuestion(Message message, String text, long userId, long chatId) {
        String question = text.startsWith("/ask ")
                ? text.replace("/ask ", "")
                : text.replace("/ask@ITIS_FAQ_BOT ", "");

        String answer = FAQclient.ask(question);
        answer = processAnswer(answer, userId, chatId, question);

        if (!answer.isEmpty()) {
            Message answerMessage = sendAnswer(chatId, answer);
            MESSAGE_STORAGE.put(answerMessage.getMessageId(), new MessageStorage.QuestionInfo(userId, question));
        } else
            // –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ —Å–º–æ–≥–ª–∞ –æ—Ç–≤–µ—Ç–∏—Ç—å, —Å—Ä–∞–∑—É —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            sendAdminResponseRequest(chatId, question, "", message.getFrom());
    }

    private String processAnswer(String answer, long userId, long chatId, String question) {
        if (answer.equals("LOW_CONFIDENCE")) {
            LOGGER_BOT.addLog(new LogEntry(
                    userId, chatId, question, answer, 0.0,
                    "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –ª–æ–≥", "LOW_CONFIDENCE"
            ));
            return "";
        }
        return answer.replace("\"answer\":", "")
                .replace("\"", "")
                .replace("{", "")
                .replace("}", "");
    }

    public Message sendAnswer(long chatId, String answer) {
        SendMessage message = SendMessage.builder()
                .chatId(chatId)
                .text(answer)
                .replyMarkup(createFeedbackButtons())
                .build();
        try {
            return CLIENT.execute(message);
        } catch (Exception e) {
            System.out.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: " + e.getMessage());
            return null;
        }
    }

    private InlineKeyboardMarkup createFeedbackButtons() {
        List<InlineKeyboardRow> rows = new ArrayList<>();
        InlineKeyboardRow row = new InlineKeyboardRow();

        row.add(InlineKeyboardButton.builder()
                .text("üëç –ü–æ–º–æ–≥–ª–æ")
                .callbackData("feedback:yes")
                .build());

        row.add(InlineKeyboardButton.builder()
                .text("üëé –ù–µ –ø–æ–º–æ–≥–ª–æ")
                .callbackData("feedback:no")
                .build());

        rows.add(row);
        return InlineKeyboardMarkup.builder().keyboard(rows).build();
    }

    void sendMessage(long chatId, String text) {
        try {
            CLIENT.execute(SendMessage.builder()
                    .chatId(chatId)
                    .text(text)
                    .build());
        } catch (Exception e) {
            System.out.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è");
        }
    }

    void sendAdminResponseRequest(long chatId, String question, String badAnswer, User user) {
        String messageText = buildAdminRequestText(question, badAnswer, user.getUserName());
        InlineKeyboardMarkup markup = createResponseButton();

        try {
            Message sentMessage = CLIENT.execute(SendMessage.builder()
                    .chatId(chatId)
                    .text(messageText)
                    .replyMarkup(markup)
                    .build());

            MESSAGE_STORAGE.addPendingQuestion(
                    sentMessage.getMessageId(),
                    user.getId(),
                    user.getUserName(),
                    chatId
            );
        } catch (TelegramApiException e) {
            System.out.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É");
        }
    }

    private String buildAdminRequestText(String question, String badAnswer, String username) {
        StringBuilder sb = new StringBuilder();
        sb.append("üö® –¢—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–≤–µ—Ç –¥–ª—è @").append(username).append(":\n\n");
        sb.append("‚ùì –í–æ–ø—Ä–æ—Å: ").append(question).append("\n\n");

        if (!badAnswer.isEmpty()) {
            sb.append("üí¨ –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –æ—Ç–≤–µ—Ç: ").append(badAnswer).append("\n\n");
        }

        return sb.toString();
    }

    private InlineKeyboardMarkup createResponseButton() {
        return InlineKeyboardMarkup.builder()
                .keyboardRow(new InlineKeyboardRow(
                        InlineKeyboardButton.builder()
                                .text("\uD83D\uDD0D –û—Ç–≤–µ—Ç–∏—Ç—å")
                                .callbackData("admin_response")
                                .build()
                ))
                .build();
    }

    private void handleAdminResponse(Message message) {
        Integer questionMessageId = MESSAGE_STORAGE.getAdminMessageId(message.getFrom().getId());
        if (questionMessageId == null) return;

        MessageStorage.PendingQuestion question = MESSAGE_STORAGE.getPendingQuestion(questionMessageId);
        if (question == null) return;

        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            String response = "‚úâ @" + question.username + ", –æ—Ç–≤–µ—Ç –æ—Ç –ø—Ä–∏—ë–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏:\n" + message.getText();
            CLIENT.execute(SendMessage.builder()
                    .chatId(question.chatId)
                    .text(response)
                    .build());

            // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            MESSAGE_STORAGE.removePendingQuestion(questionMessageId);
            MESSAGE_STORAGE.clearAdminState(message.getFrom().getId());

        } catch (TelegramApiException e) {
            System.out.println("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞");
        }
    }
}