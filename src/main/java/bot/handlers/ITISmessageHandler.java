package bot.handlers;

import bot.DevLoggerBot;
import bot.Secrets;
import bot.shared.FAQclient;
import bot.shared.LogEntry;
import bot.shared.MessageStorage;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.User;
import org.telegram.telegrambots.meta.api.objects.message.Message;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardRow;
import org.telegram.telegrambots.meta.generics.TelegramClient;
import java.util.ArrayList;
import java.util.List;

/**
 * –ö–ª–∞—Å—Å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è @ITIS_FAQ_BOT
 * @author github.com/SlavikJunior
 * @version 1.0.1
 * @since 1.0.1
 **/

public class ITISmessageHandler {
    private final TelegramClient CLIENT;
    private final DevLoggerBot LOGGER_BOT;
    private final MessageStorage MESSAGE_STORAGE;

    public ITISmessageHandler(TelegramClient client, DevLoggerBot loggerBot, MessageStorage messageStorage) {
        CLIENT = client;
        LOGGER_BOT = loggerBot;
        MESSAGE_STORAGE = messageStorage;
    }

    public void handle(Message message) {
        if (!message.hasText()) return;

        User user = message.getFrom();
        String text = message.getText();
        long userId = user.getId();
        long chatId = message.getChatId();

        if (Secrets.isAlarmUser(String.valueOf(userId))) {
            sendMessage(chatId, Secrets.getAnswerForAlarmUser(String.valueOf(userId)));
            return;
        }

        if (text.equals("/start") || text.equals("/start@ITIS_FAQ_BOT")) {
            sendMessage(chatId, "\uD83E\uDD16 FAQ-–±–æ—Ç –ø—Ä–∏—ë–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏. –ü–æ–º–æ–≥–∞—é –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞–º –ø–æ—Å—Ç—É–ø–∏—Ç—å!");
        } else if (text.equals("/help") || text.equals("/help@ITIS_FAQ_BOT")) {
            sendMessage(chatId, "\uD83D\uDCCC –ù–∞–ø–∏—à–∏ /ask –∏ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å");
        } else if (text.equals("/ask") || text.equals("/ask@ITIS_FAQ_BOT")) {
            sendMessage(chatId, "\uD83D\uDCA1 –ü–æ–ø—Ä–æ–±—É–π /ask –∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å");
        } else if (text.startsWith("/ask ") || text.startsWith("/ask@ITIS_FAQ_BOT ")) {
            handleQuestion(message, text, userId, chatId);
        }
    }

    private void handleQuestion(Message message, String text, long userId, long chatId) {
        String question = text.startsWith("/ask ")
                ? text.replace("/ask ", "")
                : text.replace("/ask@ITIS_FAQ_BOT ", "");

        String answer = FAQclient.ask(question);
        answer = processAnswer(answer, userId, chatId, question);

        if (!answer.isEmpty()) {
            Message answerMessage = sendAnswer(chatId, answer);
            MESSAGE_STORAGE.put(answerMessage.getMessageId(), new MessageStorage.QuestionInfo(userId, question));
        } else {
            // –Ω–µ –∑–Ω–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞: –¢–µ–≥–∞–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, + "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–∂–¥–∞—Ç—å—Å—è –æ—Ç–≤–µ—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –ª–∏–±–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–∞–º–∏"
            // + –∫–Ω–æ–ø–∫–∞ –æ—Ç–≤–µ—Ç–∏—Ç—å, –∫–æ—Ç–æ—Ä—É—é –º–æ–≥—É—Ç –Ω–∞–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
            sendMessage(chatId, "üö® –ù–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å:\n\n‚ùì –í–æ–ø—Ä–æ—Å:\n" + question +
                    "\n\n\uD83D\uDCAC–ü—Ä–∏–µ–º–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è: " + String.join(" ", Secrets.getAdmission()));
        }
    }

    private String processAnswer(String answer, long userId, long chatId, String question) {
        if (answer.equals("LOW_CONFIDENCE")) {
            LOGGER_BOT.addLog(new LogEntry(
                    userId, chatId, question, answer, 0.0,
                    "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –ª–æ–≥", "LOW_CONFIDENCE"
            ));
            return "";
        }
        return answer.replace("\"answer\":", "")
                .replace("\"", "")
                .replace("{", "")
                .replace("}", "");
    }

    public Message sendAnswer(long chatId, String answer) {
        SendMessage message = SendMessage.builder()
                .chatId(chatId)
                .text(answer)
                .replyMarkup(createFeedbackButtons())
                .build();
        try {
            return CLIENT.execute(message);
        } catch (Exception e) {
            System.out.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: " + e.getMessage());
            return null;
        }
    }

    private InlineKeyboardMarkup createFeedbackButtons() {
        List<InlineKeyboardRow> rows = new ArrayList<>();
        InlineKeyboardRow row = new InlineKeyboardRow();

        row.add(InlineKeyboardButton.builder()
                .text("üëç –ü–æ–º–æ–≥–ª–æ")
                .callbackData("feedback:yes")
                .build());

        row.add(InlineKeyboardButton.builder()
                .text("üëé –ù–µ –ø–æ–º–æ–≥–ª–æ")
                .callbackData("feedback:no")
                .build());

        rows.add(row);
        return InlineKeyboardMarkup.builder().keyboard(rows).build();
    }

    // —Å–¥–µ–ª–∞—Ç—å private –ø–æ—Ç–æ–º
    public void sendMessage(long chatId, String text) {
        try {
            CLIENT.execute(SendMessage.builder()
                    .chatId(chatId)
                    .text(text)
                    .build());
        } catch (Exception e) {
            System.out.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è");
        }
    }
}