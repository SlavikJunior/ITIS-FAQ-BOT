package bot;

import bot.handlers.MessageHandler;
import bot.shared.FAQclient;
import bot.shared.LogEntry;
import bot.shared.MessageStorage;
import org.telegram.telegrambots.client.okhttp.OkHttpTelegramClient;
import org.telegram.telegrambots.longpolling.interfaces.LongPollingUpdateConsumer;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageReplyMarkup;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.User;
import org.telegram.telegrambots.meta.api.objects.message.Message;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.generics.TelegramClient;
import java.util.List;

/**
 * –ö–ª–∞—Å—Å –æ–ø–∏—Å—ã–≤–∞–µ—Ç @ITIS_FAQ_BOT.
 * @author github.com/SlavikJunior, github.com/tensaid7
 * @version 1.0.0
 * @since 1.0.0
 **/

public class ITISbot implements LongPollingUpdateConsumer {
    private final TelegramClient CLIENT;
    private final MessageHandler MESSAGE_HANDLER;
    private final DevLoggerBot LOGGER_BOT;
    private final MessageStorage MESSAGE_STORAGE;

    public ITISbot(DevLoggerBot loggerBot) {
        CLIENT = new OkHttpTelegramClient(Secrets.TOKEN);
        LOGGER_BOT = loggerBot;
        MESSAGE_HANDLER = new MessageHandler(CLIENT);
        MESSAGE_STORAGE = new MessageStorage();
    }

    @Override
    public void consume(List<Update> updates) {
        for (Update update : updates) {
            if (update.hasMessage()) {
                User user = update.getMessage().getFrom();
                if (Secrets.isAlarmUser(String.valueOf(user.getId()))) {
                    MESSAGE_HANDLER.sendMessage(
                            update.getMessage().getChatId(),
                            Secrets.getAnswerForAlarmUser(
                                    String.valueOf(user.getId())));
                    continue;
                }
            }

            String text;
            if (update.hasMessage() && update.getMessage().hasText()) {
                text = update.getMessage().getText();
                long userId = update.getMessage().getFrom().getId();
                long chatId = update.getMessage().getChatId();

                if (text.equals("/start") || text.equals("/start@ITIS_FAQ_BOT"))
                    MESSAGE_HANDLER.sendMessage(chatId, "\uD83E\uDD16 FAQ-–±–æ—Ç –ø—Ä–∏—ë–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏. –ü–æ–º–æ–≥–∞—é –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞–º –ø–æ—Å—Ç—É–ø–∏—Ç—å!");
                else if (text.equals("/help") || text.equals("/help@ITIS_FAQ_BOT"))
                    MESSAGE_HANDLER.sendMessage(chatId, "\uD83D\uDCA1 –ù–∞–ø–∏—à–∏ /ask –∏ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å");
                else if (text.equals("/ask") || text.equals("/ask@ITIS_FAQ_BOT")) {
                    MESSAGE_HANDLER.sendMessage(chatId, "\uD83D\uDEA8 –ú—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã");
                } else if (text.startsWith("/ask ") || text.startsWith("/ask@ITIS_FAQ_BOT ")) {
                    String question;
                    if (text.startsWith("/ask "))
                        question = text.replace("/ask ", "");
                    else
                        question = text.replace("/ask@ITIS_FAQ_BOT ", "");

                    String answer = FAQclient.ask(question);
                    answer = handleAnswer(answer, userId, chatId, question);
                    if (!answer.isEmpty()) {
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞
                        Message answerMessage = MESSAGE_HANDLER.sendAnswer(chatId, answer);
                        MESSAGE_STORAGE.put(answerMessage.getMessageId(), new MessageStorage.QuestionInfo(userId, question));
                    } else {
//                        sendLowConfidenceAlert(chatId, question);
                        MESSAGE_HANDLER.sendMessage(chatId, "üö® –ù–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å:\n\n" +
                                "‚ùì –í–æ–ø—Ä–æ—Å:\n" + question + "\n\n" +
                                "\uD83D\uDCAC–ü—Ä–∏–µ–º–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è: " + String.join(" ", Secrets.getAdmission()));
                    }
                }
            } else if (update.hasCallbackQuery()) {
                handleFeedback(update.getCallbackQuery());
            }
        }
    }

    private String handleAnswer(String answer, long userId, long chatId, String question) {
        if (answer.equals("LOW_CONFIDENCE")) {
            LogEntry log = new LogEntry(
                    userId,
                    chatId,
                    question,
                    answer,
                    0.0,
                    "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –ª–æ–≥",
                    "LOW_CONFIDENCE"
            );
            LOGGER_BOT.addLog(log);
            return "";
        }
        answer = answer.replace("\"answer\":", "");
        answer = answer.replace("\"", "");
        answer = answer.replace("{", "");
        answer = answer.replace("}", "");
        return answer;
    }

    private void handleFeedback(CallbackQuery callbackQuery) {
        User pushedUser = callbackQuery.getFrom(); // —Ç–æ—Ç, –∫—Ç–æ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É
        long chatId = callbackQuery.getMessage().getChatId();
        Integer messageId = callbackQuery.getMessage().getMessageId();

        if (!MESSAGE_STORAGE.isAsked(pushedUser.getId())) {
            // –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏–º –µ—Å–ª–∏ —Ñ–∏–¥–±–µ—á–∏—Ç –Ω–µ —Ç–æ—Ç, –∫—Ç–æ —Å–ø—Ä–∞—à–∏–≤–∞–ª —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
            return;
        }

        String[] data = callbackQuery.getData().split(":");
        if (data.length != 2 || !data[0].equals("feedback"))
            return;

        String question = MESSAGE_STORAGE.get(messageId).getQuestion();
        MessageStorage.QuestionInfo info = MESSAGE_STORAGE.get(messageId);
        if (info == null)
            return; // —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ


        String feedbackType = data[1];
        Message maybeInaccessibleMessage = (Message) callbackQuery.getMessage();

        String answer = maybeInaccessibleMessage.getText(); // –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å

        if (feedbackType.equals("no")) {
            LogEntry log = new LogEntry(
                    pushedUser.getId(),
                    chatId,
                    question,
                    answer, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
                    0.0,
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ—Ç–∏–ª –æ—Ç–≤–µ—Ç –∫–∞–∫ –Ω–µ–ø–æ–ª–µ–∑–Ω—ã–π",
                    "BAD_FEEDBACK"
            );
            LOGGER_BOT.addLog(log);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            sendNegativeFeedbackAlert(chatId, question, messageId);
        }

        try {
            CLIENT.execute(EditMessageReplyMarkup.builder()
                    .chatId(chatId)
                    .messageId(callbackQuery.getMessage().getMessageId())
                    .replyMarkup(null)
                    .build());
        } catch (TelegramApiException e) {
            System.out.println("–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ—è–º —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏ –¥–ª—è —Ñ–∏–¥–±–µ–∫–∞!");
        }

        try {
            CLIENT.execute(SendMessage.builder()
                    .chatId(chatId)
                    .text(feedbackType.equals("yes") ? "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! \uD83D\uDC4D" : "–ú—ã —É—á—Ç–µ–º –≤–∞—à –æ—Ç–∑—ã–≤ –∏ —É–ª—É—á—à–∏–º –æ—Ç–≤–µ—Ç! \uD83D\uDCDD")
                    .build());
        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: " + e.getMessage());
        }
    }

    public void sendNegativeFeedbackAlert(long chatId, String question, Integer messageId) {
        String message = "üö® –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–∑—ã–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å:\n\n" +
                "‚ùì –í–æ–ø—Ä–æ—Å:\n" + question + "\n\n" +
                "\uD83D\uDCAC–ü—Ä–∏–µ–º–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è: " + String.join(" ", Secrets.getAdmission());

        SendMessage alert = SendMessage.builder()
                .chatId(chatId)
                .text(message)
                .build();

        try {
            CLIENT.execute(alert);
        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ –ø–ª–æ—Ö–æ–≥–æ —Ñ–∏–¥–±–µ–∫–∞: " + e.getMessage());
        }
        MESSAGE_STORAGE.remove(messageId); // –∏ –≤ –∫–æ–Ω—Ü–µ, –∫–æ–≥–¥–∞ –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –º—ã –µ–≥–æ —É–¥–∞–ª—è–µ–º
    }

    public void sendLowConfidenceAlert(long chatId, String question) {
        String message = "üö® –ù–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å:\n\n" +
                "‚ùì –í–æ–ø—Ä–æ—Å:\n" + question + "\n\n" +
                "\uD83D\uDCAC–ü—Ä–∏–µ–º–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è: " + String.join(" ", Secrets.getAdmission());

        SendMessage alert = SendMessage.builder()
                .chatId(chatId)
                .text(message)
                .build();

        try {
            CLIENT.execute(alert);
        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: " + e.getMessage());
        }
    }
}