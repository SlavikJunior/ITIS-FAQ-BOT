package bot;

import bot.handlers.MessageHandler;
import bot.shared.FAQmodel;
import bot.shared.LogEntry;

import org.telegram.telegrambots.client.okhttp.OkHttpTelegramClient;
import org.telegram.telegrambots.longpolling.interfaces.LongPollingUpdateConsumer;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.User;
import org.telegram.telegrambots.meta.api.objects.message.Message;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.generics.TelegramClient;

import java.util.List;

public class ITISbot implements LongPollingUpdateConsumer {
    private final TelegramClient CLIENT;
    private final MessageHandler MESSAGE_HANDLER;
    private final DevLoggerBot LOGGER_BOT;
    private final FAQmodel FAQmodel;
    private final double LOW_CONFIDENCE = 0.7;

    public ITISbot(DevLoggerBot loggerBot) {
        this.CLIENT = new OkHttpTelegramClient(Secrets.TOKEN);
        this.LOGGER_BOT = loggerBot;
        this.FAQmodel = new FAQmodel("path/to/model.bin");
        this.MESSAGE_HANDLER = new MessageHandler(CLIENT);
    }

    @Override
    public void consume(List<Update> updates) {
        for (Update update : updates) {
            if (update.hasMessage()) {
                User user = update.getMessage().getFrom();
                if (Secrets.isAlarmUser(String.valueOf(user.getId()))) {
//                    CLIENT.execute(–∫–∞–∫–æ–π—Ç–æ executable –∏–ª–∏ BotApiMethod)
                    MESSAGE_HANDLER.sendMessage(update.getMessage().getChatId(), "\uD83D\uDEA8 –ú—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∂—É–∫–æ–≤ \uD83E\uDEB5");
                    continue;
                }
            }

            String text = "";
            if (update.hasMessage() && update.getMessage().hasText()) {
                text = update.getMessage().getText();
                long userId = update.getMessage().getFrom().getId();
                long chatId = update.getMessage().getChatId();

                if (text.equals("/start") || text.equals("/start@ITIS_FAQ_BOT"))
                    MESSAGE_HANDLER.sendMessage(chatId, "\uD83E\uDD16 FAQ-–±–æ—Ç –ø—Ä–∏—ë–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏. –ü–æ–º–æ–≥–∞—é –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞–º –ø–æ—Å—Ç—É–ø–∏—Ç—å!");
                else if (text.equals("/help") || text.equals("/help@ITIS_FAQ_BOT"))
                    MESSAGE_HANDLER.sendMessage(chatId, "\uD83D\uDCA1 –ü–æ–ø—Ä–æ–±—É–π /ask –∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å–∏–∫");
                else if (text.equals("/ask") || text.equals("/ask@ITIS_FAQ_BOT")) {
                    MESSAGE_HANDLER.sendMessage(chatId, "\uD83D\uDEA8 –ú—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã");
                } else if (text.startsWith("/ask ") || text.startsWith("/ask@ITIS_FAQ_BOT ")) {
                    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ (–∑–∞–≥–ª—É—à–∫–∞)
                    // –Ω–∞–≤–µ—Ä–Ω–æ–µ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∫–æ–π-—Ç–æ –æ–±—ä–µ–∫—Ç –∏ –≤ –Ω—ë–º –±—É–¥–µ—Ç
                    // –∏ –æ—Ç–≤–µ—Ç –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, –Ω–µ –Ω–∞–¥–æ –±—É–¥–µ—Ç –æ–ø—Ä–∞—à–∏–≤–∞—Ç—å –¥–≤–∞ —Ä–∞–∑–∞
                    String answer = FAQmodel.getAnswer(text);
                    double confidence = FAQmodel.getConfidence(text);

                    // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
                    handleConfidence(confidence, userId, chatId, text, answer);

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    MESSAGE_HANDLER.sendAnswer(chatId, answer);
                }
            } else if (update.hasCallbackQuery()) {
                handleFeedback(update.getCallbackQuery(), text);
            }
        }
    }

    private void handleConfidence(double confidence, long userId, long chatId, String question, String answer) {
        if (confidence < LOW_CONFIDENCE) {
            LogEntry log = new LogEntry(
                    userId,
                    chatId,
                    question,
                    answer,
                    confidence,
                    "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –ª–æ–≥",
                    "LOW_CONFIDENCE"
            );
            LOGGER_BOT.addLog(log);
        }
    }

    private void handleFeedback(CallbackQuery callbackQuery, String question) {
        String[] data = callbackQuery.getData().split(":");
        if (data.length != 2 || !data[0].equals("feedback")) return;

        String feedbackType = data[1];
        Message maybeInaccessibleMessage = (Message) callbackQuery.getMessage();

        String answer = maybeInaccessibleMessage.getText(); // –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å

        long chatId = callbackQuery.getMessage().getChatId();

        if (feedbackType.equals("no")) {
            LogEntry log = new LogEntry(
                    callbackQuery.getFrom().getId(),
                    callbackQuery.getMessage().getChatId(),
                    question,
                    answer, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
                    0.0,
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ—Ç–∏–ª –æ—Ç–≤–µ—Ç –∫–∞–∫ –Ω–µ–ø–æ–ª–µ–∑–Ω—ã–π",
                    "BAD_FEEDBACK"
            );
            LOGGER_BOT.addLog(log);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            sendNegativeFeedbackAlert(callbackQuery.getMessage().getChatId(), answer);
        }

        try {
            CLIENT.execute(SendMessage.builder()
                    .chatId(chatId)
                    .text(feedbackType.equals("yes") ? "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! \uD83D\uDCA1" : "–ú—ã —É—á—Ç–µ–º –≤–∞—à –æ—Ç–∑—ã–≤ –∏ —É–ª—É—á—à–∏–º –æ—Ç–≤–µ—Ç! \uD83D\uDCDD")
                    .build());
        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: " + e.getMessage());
        }
    }

    public void sendNegativeFeedbackAlert(long chatId, String question) {
        String message = "üö® –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–∑—ã–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å:\n\n" +
                "‚ùì –í–æ–ø—Ä–æ—Å:\n" + question + "\n\n" +
                "\uD83D\uDCAC–ü—Ä–∏–µ–º–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è: " + String.join(" ", Secrets.getAdmission());

        SendMessage alert = SendMessage.builder()
                .chatId(chatId)
                .text(message)
                .build();

        try {
            CLIENT.execute(alert);
        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞: " + e.getMessage());
        }
    }
}